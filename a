warning: unused imports: `Chars`, `ColorChoice`, `Diagnostic`, `DisplayStyle`, `Label`, `StandardStream`, `files::SimpleFiles`, and `self`
 --> src/main.rs:2:18
  |
2 |     diagnostic::{Diagnostic, Label},
  |                  ^^^^^^^^^^  ^^^^^
3 |     files::SimpleFiles,
  |     ^^^^^^^^^^^^^^^^^^
4 |     term::{
5 |         self,
  |         ^^^^
6 |         termcolor::{ColorChoice, StandardStream},
  |                     ^^^^^^^^^^^  ^^^^^^^^^^^^^^
7 |         Chars, DisplayStyle,
  |         ^^^^^  ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `location::LocationHistory`
  --> src/main.rs:11:5
   |
11 | use location::LocationHistory;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `parser::Parser`
  --> src/main.rs:12:5
   |
12 | use parser::Parser;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::fmt::Display`
 --> src/parser/ast.rs:1:5
  |
1 | use std::fmt::Display;
  |     ^^^^^^^^^^^^^^^^^

warning: method `as_header_name` is never used
   --> src/lexer.rs:196:19
    |
195 | impl PreprocessingToken {
    | ----------------------- method in this implementation
196 |     pub(crate) fn as_header_name(&self) -> Option<(&String, &HeaderNameKind)> {
    |                   ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: fields `kind` and `content` are never read
   --> src/preprocess/tree.rs:130:5
    |
129 | pub struct Group {
    |            ----- fields in this struct
130 |     kind: GroupKind,
    |     ^^^^
131 |     content: Vec<GroupChild>,
    |     ^^^^^^^
    |
    = note: `Group` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `cyntax` (bin "cyntax") generated 6 warnings (run `cargo fix --bin "cyntax"` to apply 4 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/cyntax`
[src/main.rs:25:5] &lexer_tokens = [
    Punctuator(
        Hash,
    ),
    Identifier(
        "ifdef",
    ),
    Whitespace(
        ' ',
    ),
    Identifier(
        "test",
    ),
    Newline,
    Identifier(
        "int",
    ),
    Whitespace(
        ' ',
    ),
    Identifier(
        "a",
    ),
    Punctuator(
        Semicolon,
    ),
    Newline,
    Punctuator(
        Hash,
    ),
    Identifier(
        "elif",
    ),
    Whitespace(
        ' ',
    ),
    Number(
        "2",
    ),
    Punctuator(
        EqualEqual,
    ),
    Whitespace(
        ' ',
    ),
    Number(
        "2",
    ),
    Newline,
    Identifier(
        "int",
    ),
    Whitespace(
        ' ',
    ),
    Identifier(
        "b",
    ),
    Punctuator(
        Semicolon,
    ),
    Newline,
    Punctuator(
        Hash,
    ),
    Identifier(
        "else",
    ),
    Whitespace(
        ' ',
    ),
    Newline,
    Identifier(
        "int",
    ),
    Whitespace(
        ' ',
    ),
    Identifier(
        "c",
    ),
    Punctuator(
        Semicolon,
    ),
    Newline,
    Punctuator(
        Hash,
    ),
    Identifier(
        "endif",
    ),
    Newline,
]
[src/main.rs:28:5] &groups = [
    Directive(
        Ifdef(
            "test",
        ),
    ),
    Tokens(
        [
            Newline,
            Identifier(
                "int",
            ),
            Whitespace(
                ' ',
            ),
            Identifier(
                "a",
            ),
            Punctuator(
                Semicolon,
            ),
            Newline,
        ],
    ),
    Directive(
        Elif(
            [
                Number(
                    "2",
                ),
                Punctuator(
                    EqualEqual,
                ),
                Whitespace(
                    ' ',
                ),
                Number(
                    "2",
                ),
            ],
        ),
    ),
    Tokens(
        [
            Newline,
            Identifier(
                "int",
            ),
            Whitespace(
                ' ',
            ),
            Identifier(
                "b",
            ),
            Punctuator(
                Semicolon,
            ),
            Newline,
        ],
    ),
    Directive(
        Else,
    ),
    Tokens(
        [
            Newline,
            Identifier(
                "int",
            ),
            Whitespace(
                ' ',
            ),
            Identifier(
                "c",
            ),
            Punctuator(
                Semicolon,
            ),
            Newline,
        ],
    ),
    Directive(
        Endif,
    ),
    Tokens(
        [
            Newline,
        ],
    ),
]
[src/main.rs:30:5] &groups = [
    Group {
        kind: IfDef(
            None,
        ),
        content: [
            Group(
                Group {
                    kind: Global,
                    content: [
                        Token(
                            Newline,
                        ),
                        Token(
                            Identifier(
                                "int",
                            ),
                        ),
                        Token(
                            Whitespace(
                                ' ',
                            ),
                        ),
                        Token(
                            Identifier(
                                "a",
                            ),
                        ),
                        Token(
                            Punctuator(
                                Semicolon,
                            ),
                        ),
                        Token(
                            Newline,
                        ),
                    ],
                },
            ),
        ],
    },
    Group {
        kind: Global,
        content: [
            Token(
                Newline,
            ),
            Token(
                Identifier(
                    "int",
                ),
            ),
            Token(
                Whitespace(
                    ' ',
                ),
            ),
            Token(
                Identifier(
                    "b",
                ),
            ),
            Token(
                Punctuator(
                    Semicolon,
                ),
            ),
            Token(
                Newline,
            ),
        ],
    },
    Group {
        kind: Else,
        content: [
            Group(
                Group {
                    kind: Global,
                    content: [
                        Token(
                            Newline,
                        ),
                        Token(
                            Identifier(
                                "int",
                            ),
                        ),
                        Token(
                            Whitespace(
                                ' ',
                            ),
                        ),
                        Token(
                            Identifier(
                                "c",
                            ),
                        ),
                        Token(
                            Punctuator(
                                Semicolon,
                            ),
                        ),
                        Token(
                            Newline,
                        ),
                    ],
                },
            ),
        ],
    },
    Group {
        kind: Global,
        content: [
            Token(
                Newline,
            ),
        ],
    },
]
